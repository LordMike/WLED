name: LordMike custom builds

on: [push]

jobs:

  get_override_envs:
    name: Gather Override Environments
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Get override environments
      id: envs
      run: |
        envs=$(grep -oP '(?<=\[env:).+?(?=\])' platformio_override.ini)
        echo "environments=[\"$(echo $envs | sed 's/ /","/g')\"]" >> $GITHUB_OUTPUT
    outputs:
      environments: ${{ steps.envs.outputs.environments }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: get_override_envs
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJSON(needs.get_override_envs.outputs.environments) }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        cache: 'npm'
    - run: npm ci
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: |
              ~/.platformio/.cache
              ~/.buildcache
              build_output
        key: pio-${{ runner.os }}-${{ matrix.environment }}-${{ hashFiles('platformio.ini', 'platformio_override.ini', 'pio-scripts/output_bins.py') }}-${{ hashFiles('wled00/**', 'usermods/**') }}
        restore-keys: pio-${{ runner.os }}-${{ matrix.environment }}-${{ hashFiles('platformio.ini', 'platformio_override.ini', 'pio-scripts/output_bins.py') }}-
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
          python-version: '3.12'
          cache: 'pip'
    - name: Install PlatformIO
      run: pip install -r requirements.txt
    - name: Build firmware
      run: pio run -e ${{ matrix.environment }}
    - uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ matrix.environment }}
        path: |
          build_output/release/*.bin
          build_output/release/*_ESP02*.bin.gz